import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentHtmlReporter;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.*;

import java.io.File;
import java.lang.reflect.Method;

public class testNG_calendar {

    ExtentReports reports;
    ExtentTest testInfo;
    ExtentHtmlReporter htmlReporter;

    @BeforeTest  // 1. registered and initialisation and repeating again
    public void setup() {
        htmlReporter = new ExtentHtmlReporter(new File(System.getProperty("user.dir") + "./AutomationReports.html"));
        htmlReporter.loadXMLConfig(new File(System.getProperty("user.dir") + "/extent-config.xml"));
        reports = new ExtentReports();
        reports.setSystemInfo("Environment", "QA");
        reports.attachReporter(htmlReporter);

    }

    @Test // 2. test cases one ad two
    public void methodOne() throws InterruptedException {
        System.setProperty("webdriver.chrome.driver", "C:\\Work\\chromedriver.exe");
        WebDriver driver = new ChromeDriver();
        driver.get("https://spicejet.com");
        driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
        Thread.sleep(3000);
        driver.findElement(By.xpath("//input[@id='ctl00_mainContent_ddl_originStation1_CTXT']")).click();
        driver.findElement(By.xpath("//div[@id='glsctl00_mainContent_ddl_originStation1_CTNR']//a[@value='MAA']")).click();
        driver.findElement(By.cssSelector("div[id='divpaxinfo']")).click();
        //.ui-state-default.ui-state-highlight
        driver.findElement(By.xpath("//div[@id='glsctl00_mainContent_ddl_destinationStation1_CTNR']//a[@value='IXB']")).click();
        driver.close();
    }

    @Test
    public void methodTwo() {
        Assert.assertTrue(true);
        testInfo.log(Status.INFO, "This is test number two");
    }

    @BeforeMethod  // 3. registering each every test within .createTest
    public void register(Method method) {
        String testName = method.getName();
        testInfo = reports.createTest(testName);
    }

    @AfterMethod  // 4. checking  what is a state
    public void captureStatus(ITestResult result) {
        if (result.getStatus() == ITestResult.SUCCESS) {
            testInfo.log(Status.PASS, "The Test Method named as : " + result.getName() + "Is Passed");

        } else if (result.getStatus() == ITestResult.FAILURE) {
            testInfo.log(Status.PASS, "The Test Method named as : " + result.getName() + "is Failed");
            testInfo.log(Status.FAIL, "Test failure : " + result.getThrowable());
        }else if (result.getStatus() == ITestResult.SKIP) {
            testInfo.log(Status.PASS, "The Method named as : " + result.getName() + "is passed");
        }
    }

    @AfterTest // 5. cleanUp of things
    public void cleanUp(){
        reports.flush();
    }
}
